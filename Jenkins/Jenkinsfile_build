/* groovylint-disable DuplicateStringLiteral, LineLength, NestedBlockDepth */
def fileContents

pipeline {
    agent any
    tools {
        jfrog 'jfrog-cli'
        maven 'maven'
    }
    environment {
        WORKING_DIR = "${WORKSPACE}/java-app"
        COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        NEW_GIT_BRANCH = sh(script: "echo $GIT_BRANCH | sed -r 's|origin/||g'", returnStdout: true).trim()
        NAME_ARTIFACT = "${BUILD_TAG}-citizen-${NEW_GIT_BRANCH}-${COMMIT_HASH}.war"
    }
    stages {
        stage('add credentials') {
            steps {
                script {
                    dir("${WORKING_DIR }/src/main/resources/") {
                        withCredentials([
                        file(
                            credentialsId: 'properties',
                            variable: 'test')
                        ]) {
                            sh 'cp "\$test" application.properties'
                            sh "bash ${WORKSPACE}/Jenkins/env.sh"
                        }
                    }
                }
            }
        }
        // stage('Build artifact') {
        //     steps {
        //         echo 'Maven build'
        //         dir("${WORKING_DIR }") {
        //                 sh 'mvn clean install'}
        //     }
        // }
        // stage('Push') {
        //     steps {
        //         echo 'Push to jfrog repository'
        //         dir("${WORKING_DIR }/target") {
        //             sh "echo ${NAME_ARTIFACT}"
        //             jf "rt u  citizen.war maven-repository/${NAME_ARTIFACT}"
        //         }
        //     }
        // }
        stage('Pipeline Step') {
            steps {
                script {
                    tee('search_output.txt') {
                        jf 'rt s maven-repository/'}
                    sh 'bash Jenkins/names.sh search_output.txt'
                    fileContents = readFile('names.txt')
                    echo fileContents
                }
            }
        }
        stage('Active choice') {
            input {
                message 'What is your choice?'
                parameters {
                    choice(name: 'CHOICE', choices: fileContents, description: 'Pick something')
                }
            }
            steps {
                script {
                    echo "${CHOICE}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
